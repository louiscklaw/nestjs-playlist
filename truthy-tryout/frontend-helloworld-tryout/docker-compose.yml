services:

  mailhog:
    image: 'mailhog/mailhog:latest'
    ports:
      - '1025:1025'
      - '8025:8025'

  cms:
    build:
      # context: .
      dockerfile: cms/Dockerfile
    restart: unless-stopped
    volumes:
      - ./cms:/usr/src/app
      - cms_node_modules:/usr/src/app/node_modules
    working_dir: /usr/src/app
    command: sleep infinity
    ports:
      - 3000:3000

  minio:
    image: minio/minio:latest
    command: server /data
    restart: unless-stopped
    environment:
      MINIO_BROWSER: on
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    ports:
      - 9000:9000
      - 9001:9001
    command: server /data --console-address ":9001"

  postgres:
    # container_name: postgres
    hostname: postgres
    image: postgres:12
    restart: always
    # env_file:
    #   - .env
    # networks:
    #   - webnet
    environment:
      POSTGRES_PASSWORD: root
      POSTGRES_USER: postgres
      POSTGRES_DB: truthy
      PG_DATA: /var/lib/postgresql/data
    ports:
      - 5432:5432
    volumes:
      - ./volumes/postgres/data:/var/lib/postgresql/data

  redis:
    image: redis:bullseye
    # user: redis:redis
    # container_name: redis
    hostname: redis
    restart: always
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
    volumes:
      - ./volumes/redis/data:/data
    # env_file:
    #   - .env
    ports:
      - 6379:6379

  pgweb:
    # container_name: pgweb
    restart: always
    image: sosedoff/pgweb
    ports:
      - 6084:8081
    links:
      - postgres:postgres
    environment:
      - DATABASE_URL=postgres://postgres:root@postgres:5432/truthy?sslmode=disable
    depends_on:
      - postgres

  backend:
    build:
      # context: .
      dockerfile: backend/Dockerfile
    # user: 1000:1000
    working_dir: /usr/src/app
    volumes:
      - ./backend:/usr/src/app
      - backend_node_modules:/usr/src/app/node_modules
    ports:
      - 7777:7777
    env_file:
      - ./backend/.env.dev
    # networks:
    #   - webnet
    depends_on:
      - postgres
      - redis
      - minio
    command: sleep infinity

# networks:
#   webnet:
#     driver: bridge

volumes:
  backend_node_modules:
  cms_node_modules:
